/*************1. Introduction:  **************/
/*-	We can use Vie for only Widgets - little parts on the website.
	"Single-Page-Appkication" The whole is created by view.*/

/* 	Vue uses a declarative approach, we just declare our goal (Where do we want dynamic data?,
		it should be related to what method?, etc.) and Vue will do the behind scene operations
		which are necessary to obtain that picture.*/

/*************2. Basics ********************/
/*-	We control Vue by creating an object at the beginning 
	This object takes data as it first parameter which is a function. "Data" is a function;
	this function returns an objet, ALWAYS an object, not array, not string, not a number.
	Inside this function we include all the key value pairs we would like to work with.
		-The idea behind "data" property: 
			Anything that is part of the object returned in data can now been used in the view control HTML part.*/
			
/*- Interpolation and Data Biding
	-Interpolation is exectued as follows on the HTML file:*/
	<p>{{<name of the key inside the data vue object}}</p>
   /*In some ocations Interpolation is not the best solution so we use Data Biding.
		Interpolation helps  to change information inside the tags.
	
	-Data Biding: We use it alwas when we want to change information from attributes of a tag:*/
	<a v-bind:href="">About Vue</a>
	//In this case we are binding (setting) the value of the attribute 'href' to a dynamic link created in Vue.
	//v-bind: will work with the attribute next to it. It will set the value inside the "".
	

/*- Connecting Vue to the HTML file:
	1. Import Vue inside the HTML file. Create the script tag with the proper link.
	2. Create vue.CreateApp()
	3. Inside vue.CreateApp(); return the data object which includes all the keys and properties (Information to use on the HTML file).
	4. Create the mount() method which selects the part of the HTMl file by Id or Classes which will be binded with Vue.*/

/*- methods: (Inside CreateApp object)
	Allows us to define functinos which should execute when something happnes. 
	To methods we pass a JavaScipt object. Methods is a JavaScript object which is full of methods.
		The name of the methods is up to us.

** It is important to know that we can use sall JS expressions and call funtions inside both options (data binding and Interpolation).**/
	
/*- this key word.
	All the variables define on the data section are part of the object CreateApp;
	in order to have access to this variables we will need to ujse the "this" key word in order to reference to them.
	(It is like in C# they are local parameters from the object and not global from the file). <video 17>*/
 
/*- If we want to give an output which should be interpreted as HTML instead of an string we need to add:
	v-html="outoutHtml" inside the tag we want to work with.
	We should not use it as default since it can create some security problems*/
	
/*- Creating Event listeners:
		-We will use the "v-on" prefix on the HTML tag which has the listened element.
		 Additionally, we need to specify the type of event we will be listening to and then the JavaScript code which will be executed once the event happens:*/
	<button v-on:click="AddOne">Add</button>

/*- We can pass arguments just like in vanilla JS.*/
	<button v-on:click="AddOne(5)">Add 5</button>
	
/*- By defautl the broweser returns the 'event' object which contains a lot of information from the event. This can be very useful for some Java Script operations.*/
		//HTML
	<input type="text" v-on:input="setName">  
		//Js - Vue
	setName(event){ 
      this.name = event.target.value;
    }
	
	/* If we need to use paramaters and still we need to use the event object. We have to use the following sysntax:*/
	<input type="text" v-on:input="setName($event, 'Tzompantzi')">  
		//Js - Vue
	setName(event, lastName){ 
      this.name = event.target.value + ' ' + lastName;
	}
	
	
/*- Event modifiers:
	-In some cases there are some behaviours of JavaScript and the browser creted by default.
		One of them is the case when we have a form with a button. Once we click the button, the default behaviour is to send an htttp request to the server to reload the page.
		In this case we reload the whole page and this makes us lose the previous information.
	-To prevent this we can use the event.preventDefault(); in vanilla JS 
		v-on:submit.prevent="submitForm"; in Vue check <video 24>